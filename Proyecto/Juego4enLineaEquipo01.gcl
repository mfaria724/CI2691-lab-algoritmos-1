{ 
  Juego4enLineaEquipo01.gcl

  DESCRIPCIÓN: Juego realizado en gcl para luego ser implementado de python.
  La finalidad es que los jugadores logren colocar 4 fichas de manera consecutiva,
  en cualquiera de las posiciones vertical, horizontal o diagonal. Al momento de
  seleccionar la jugada el jugador deberá seleccionar una columna, puesto que no 
  podrá jugar en una casilla a menos que se encuentre en la fila inferior, o que
  en la fila de abajo se encuentre alguna fichas.

  El juego tendrá dos niveles de dificultad, básico e intermedio.

  	1. En la dificultad básica la computadora hará jugadas aleatorias hasta que la
  	   la partida se acabe.

  	2. En la dificultad intermedia la computadora intentará generar una linea usando,
  	   alguna de las estrategias, que es seleccionada cada vez que la computadora se 
  	   ve obligada a realizar una jugada aleatoria.

  Al finalizar cada partida se muestran los resultados en la pantalla, es decir, el 
  ganador de la partida que acaba de terminar.

  Finalmente, se consulta con el usuario si desea jugar otra partida, en caso de 
  que no lo desee, se muestran en pantalla la cantidad de partidas ganadas por la
  persona, por el computador y la cantidad de empates. De igual manera se muestra
  la cantidad de partidas realizadas.

  Autores: 
 	  Manuel Faria 15-10463
 	  Juan Oropeza 15-11041

}

[ 
	CONST
		filas:int;													// Numero de filas del tablero
		columnas: int;												// Numero de columnas del table
		maxPartidas: int;											// Numero maximo de partidas a jugar
		azul: color 												// Color usado para las fichas de la computadora en el tablero
		rojo: color 												// Color usado para las fichas del jugador en el tablero
		verde: color 												// Color usado para dibujar el tablero
		amarillo: color 											// Color usado para resaltar las fichas ganadoras
	VAR
		tablero: array [0,filas) x [0,columnas) of int;				// Tablero de juego
		dificultad: int;											// Variable que almacena la dificultad seleccionada por el jugador (0 basico, 1 medio)
		ultimoGanador: int;											// Variable que almacena el ganador de la partida anterior
		jugador: int;												// Variable que almacena el jugador del turno actual
		numPartidas: int;											// Variable que almacena la cantidad de partidas jugadas
		jugada: int;												// Variable que almacena la columna donde se desea jugar
		ultimaJugada: array;										// Variable que almacena la fila y columna de la ultima jugada de la computadora
		continuar: boolean;											// Variable que determina si una partida ha finalizado o no
		numJugadas: int;											// Variable que almacena el numero de jugadas de la partida actual
		numJugadasPC: int;											// Variable que almacena el numero de jugadas de la computadora en la partida actual
		numEmpates: int;											// Variable que almacena el numero de empates de todos los juegos
		partidasGanadasPersona: int;								// Variable que almacena la cantidad de veces que gana el jugador
		partidasGanadasPC: int;										// Variable que almacena la cantidad de veces que gana la computadora
		ganador: int;												// Variable que almacena el ganador de la partida actual
		validacion: boolean;										// Variable que determina si una jugada es valida o no
		quiereSeguirJugando: boolean;								// Variable que determina si el usuario desea jugar otra partia o no
		ingresaJugada: boolean;										// Variable utilizada en el ciclo de cada jugada para en caso de no ser valida, poder ingresar otra jugada

{ Precondición: filas>=4 /\ columnas >= 4 /\ maxPartidas >= 0 }
	
	// Inicialización de variables.
	; numPartidas := 0
	; partidasGanadasPC := 0
	; partidasGanadasPersona := 0
	; ultimoGanador := 0
	; numEmpates := 0
	; quiereSeguirJugando := true

	{ Cota: maxPartidas - numPartidas}
	do quiereSeguirJugando == true /\ numPartidas != maxPartidas ->

		// Inicializa los valores
		continuar := true
		; inicializarPartida(numPartidas, ultimoGanador, filas, columnas; tablero; numJugadas, jugador, numJugadasPC, ultimaJugada)
		

		{ Cota: filas * columnas - numJugadas }
		do continuar == true /\ numJugadas != filas * columnas ->
			
			ingresaJugada := true
			{ Cota: No tiene, la iteracion se hará hasta que la jugada sea correcta }
			do ingresaJugada == true ->
				
				// Obtiene los valores de la jugada y verifica que sea correcto
				; jugada := obtenerJugada(filas, columnas, numJugadasPC, tablero, ultimaJugada, jugador, dificultad)
				; validarJugada(jugada, filas, columnas, tablero; validacion, ultimaJugada)

				if validacion == true ->

					// Si la jugada se puede realizar, se almacena en el tablero.
					reflejarJugada(jugada, jugador, filas, columnas; tablero)
					; jugador := cambiarTurno(jugador)
					; numJugadas := numJugadas + 1

					// Verifica si existe un ganador
					verificar4enLinea(filas, columnas, tablero; continuar, ganador)
					
					if continuar == true ->

						// Si no hay ganador,verifica que el tablero no esté lleno
						continuar := verificarTablero(numJugadas, filas, columnas)

						if continuar == false ->
							// Si el tablero está lleno, finaliza la partida y aumenta el conteo de empates
							numEmpates := numEmpates + 1
							; numPartidas := numPartidas + 1
						[] continuar == true ->
							skip
						fi

					[] continuar == false ->
						// Establece el ganador, le aumenta una victoria y lo registra para determinar el primer
						// jugador de la pŕoxima partida
						if ganador == 1 ->
							ultimoGanador := ganador
							partidasGanadasPersona := partidasGanadasPersona + 1
						[] ganador == 2 ->
							ultimoGanador := ganador
							partidasGanadasPC := partidasGanadasPC + 1
						fi
						; numPartidas := numPartidas + 1
					fi

					ingresaJugada := false

				[] validacion == false ->
					// Si la jugada no se puede realizar, se solicita una nueva jugada
					ingresaJugada := true
				fi

			od

			// Verifica que quiere continuar con la partida actual
			if jugador == 1 ->
				// Pregunta al usuario si desea seguir jugando
				continuar := seguirPartida()
				if continuar == false ->
					partidasGanadasPC := partidasGanadasPC + 1
					numPartidas := numPartidas + 1
				[] continuar == true
					skip
				fi
			[] jugador != 1 ->
				skip
			fi

		od

		// Muestra el ganador de la partida
		entregaGanadorPartida(ganador)

		// Pregunta si se desea jugar otra partida
		quiereSeguirJugando := quiereSeguir()
	od

	// Entrega los resultados finales de la partida
	entregaResultados(partidasGanadasPersona, partidasGanadasPC, numEmpates)

{ Postcondición: numPartidas >= 0 /\ partidasGanadasPersona >=0 /\ partidasGanadasPC >= 0 /\ quiereSeguirJugando == false }

]

func seguirPartida()
{ Precondición: true}
{ Postcondición: }
// El jugador ingresa si desea continuar la partida actual o no
[
	CONST
		seguirPartida: boolean     					   // "Input" de jugador

	>> seguirPartida
]

proc entregaResultados(in partidasGanadasPersona: int, partidasGanadasPC: int numEmpates: int)
{ Precondición: partidasGanadasPersona >= 0 /\ partidasGanadasPC >= 0 /\numEmpates >= 0 }
{ Postcondición: Se imprime la cantidad de partidas ganadas por el Jugador, PC y numero de empates}

proc entregaGanadorPartida(in ganador: int)
{ Precondición: 1 <= ganador <= 2 }
{ Postcondición: Se imprime el ganador de la partida en pantalla }

func quiereSeguir() -> boolean
{ Precondición: true }
{ Postcondición: true }
// El jugador ingresa si desea jugar otra partida
[
	CONST 
		quiereSeguirJugando: boolean   					// "Input" de jugador

	>> quiereSeguirJugando
]

proc inicializarPartida(in numPartidas: int, ultimoGanador: int, filas: int, columnas: int, in-out tablero: array,out numJugadas: int, 
						jugador: int, numJugadasPC: int, ultimaJugada: int)
{ Precondición: numPartidas >= 0 /\ 0 <= ultimoGanador <= 2 /\ filas >= 0 /\ columnas >= 0}
{ Postcondición: (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | tablero[i][j] == 0 %) /\ 0 <= dificultad <= 1 /\ 
				 (numPartidas != 0 \/ primerJugador == 1) /\ (numPartidas == 0 \/ primerJugador == ultimoGanador)}
// Inicializa el tablero y los valores necesarios para poder jugar
[
	inicializarTablero(filas, columnas; tablero)
	dibujarTablero(filas, columnas, verde)
	dificultad := dificultad()
	jugador := definirPrimero(numPartidas, ultimoGanador)

	// Inicializa las variables para la partida
	numJugadas := 0
	numJugadasPC := 0
	ultimaJugada := [-1,-1]

]


proc dibujarTablero(in filas: int, columnas: int, color: color)
{ Precondición: filas > 0 /\ columnas > 0 }
{ Postcondición: se dibuja en una ventana gráfica un tablero con "filas" filas y "columnas" columnas de color "color"}

proc inicializarTablero(in filas: int, in columnas: int, in-out tablero: array)

{ Precondición: filas >= 4 /\ columnas >= 4 }
{ Postcondición: (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | tablero[i][j] == 0 %) }
// Inicializa el tablero de manera que esté vacío
[
	VAR
		i: int;							// Variable auxiliar para iterar
		j: int;							// Variable auxiliar para iterar

	// Inicialización de variables
	i := 0

	// Recorre las filas
	{ Cota T: filas - i }
	do i != filas ->

		j := 0

		// Recorre las columnas
		{ Cota t2: columnas - j }
		do j != columnas ->

			// Rellena el tablero con 0's
			tablero[i][j] := 0

			;j := j + 1
		od

		i := i + 1
	od

]

func dificultad() -> (int)
{ Precondición: true }
{ Postcondición: 0 <= dificultad <= 1 }
// Dificultad ingresada por el usuario
[
	CONST
		dificultad: int;					// "Input" de jugador

	>> dificultad
]

func definirPrimero(numPartidas:int, ultimoGanador: int) -> (int)
{ Precondición: numPartidas >= 0 /\ 0 <= ultimoGanador <= 2}
{ Postcondición: (numPartidas != 0 \/ primerJugador == 1) /\ (numPartidas == 0 \/ primerJugador == ultimoGanador) }
// Función que devuelve el primer jugador dependiendo de la partida en que se encuentren
[
	VAR 
		primerJugador: int;					// Variable que almacena quien sera el primer jugador de cada partida

	if numPartidas == 0 ->
		primerJugador := 1
	[] numPartidas != 0 ->
		primerJugador := ultimoGanador
	fi

	>> primerJugador
]

func obtenerJugada(filas: int, columnas: int, numJugadasPC: int tablero: array, ultimaJugada: array, jugador: int, dificultad: int) -> int
{ Precondición: columnas >= 4 /\ 1 <= jugador <= 2 /\ 0 <= dificultad <= 1 }
{ Postcondición: 0 <= jugada <= columnas }
// Devuelve la columna donde se desea jugar
[
	CONST
		jugadaPersona: int;					// "Input" de jugador
	VAR
		jugada: int;						// Variable que almacena la columna donde se desea jugar


	if jugador == 2 -> // Turno del computador
		// Verifica la dificultad
		if dificultad == 0 ->
			// Juagada aleatoria
			jugada := randomJugadaPC(columnas)
		[] dificultad == 1 ->
			// Busca una jugada con una estrategia
			jugada := jugadaPC(filas, columnas, numJugadasPC, tablero, ultimaJugada)
		fi
	[] jugador == 1 -> // Turno del jugador
		jugada := jugadaPersona
	fi

	>> jugada
]

proc validarJugada(in jugada: int, filas: int, columnas: int, tablero: array, out validacion: boolean,
				   ultimaJugada: array)
{ Precondición: 0 <= jugada < columnas /\ filas >= 4 /\ columnas >= 4}
{ Postcondición: (% exist i : int | 0 <= i < filas | tablero[i][jugada] == 0  %) == validacion }
// Verifica si una jugada es posible o no
[
	VAR		
		i: int;								// Variable auxiliar para iterar


	i := filas -1;

	; validacion := false
	
	{ Cota t: i }
	do i != -1 ->
		if tablero[i][jugada] == 0 ->
			validacion := true

		[] tablero[i][jugada] != 0 ->
			skip
		fi

		; i := i - 1
	od

]

proc reflejarJugada(in jugada: int, jugador: int, filas: int, columnas:int, in-out tablero: array)
{ Precondición: 1 <= jugador <= 2 /\ 0 <= jugada < columnas /\ filas >= 4 /\ columnas >= 4}
{ Postcondición: (% exist i : int | 0 <= i < filas | tablero[i][jugada] == jugador %)}
// Guarda una jugada en el tablero
[
	VAR
		i: int;								// Variable auxiliar para iterar
		continuar: boolean;					// Variable auxiliar para finalizar el ciclo y evitar seguir modificando el tablero

	i := filas - 1
	continua := true

	{ Cota t: i }
	do i != -1 /\ continuar == true ->
		if tablero[i][jugada] == 0 ->
			tablero[i][jugada] := jugador
			if jugador == 2 ->
				ultimaJugada = [i,jugada]
				dibujarJugada(i, jugada, azul)
			[] jugador != 2 ->
				dibujarJugada(i, jugada, rojo)
			fi
			continuar := false
		[] tablero[i][jugada] != 0 ->
			skip
		fi

		; i := i - 1
	od
]

proc dibujarJugada(in fila: int, columna: int, color: color)
// Dibuja en el tablero la jugada luego de haberla reflejado en la matriz
{ Precondición: filas >= 0 /\ columnas >= 0 }
{ Postcondición: Se dibuja un circulo de color "color" en la casilla posicionada en la fila "fila" y columna "columna" del tablero}

func cambiarTurno(jugador: int) -> int
{ Precondición: 1 <= jugador <= 2 }
{ Postcondición: (jugador != 1 \/ jugador ==2) /\ (jugador != 2 \/ jugador == 1) }
// Pasa el turno al siguiente jugador
[
	if jugador == 1 ->
		jugador := 2
	[] jugador == 2 ->
		jugador := 1
	fi

	>> jugador
]

proc verificar4enLinea(in filas: int,columnas: int, tablero: array, out continuar:boolean, ganador:int)
{ Precondicion: filas >= 4 /\ columnas >= 4 /\ (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | 0 <= tablero[i][j] <= 2 %) }
{ Postcondición: (% exist i : int | 0 <= i < 4 | ganadores[i] != 0 /\ ganador == ganadores[i]  %) == (continuar == false) }
// Verifica si alguno de los jugadores realizó un 4 en línea
[
	VAR
		ganadores: array[0,4) of int;							// Arreglo utilizado para verificar si se cumple alguna de las verificaciones de 4 en linea
		i: int;													// Variable auxiliar para iterar

	ganadores := [verificarHorizontal(filas, columnas, tablero), verificarVertical(filas, columnas, tablero), verificarDiagonalDerecha(filas, columnas, tablero), verificarDiagonalIzquierda(filas, columnas, tablero)]
	; i := 0

	{ Cota: 4 - i}
	do i != 4 ->
		if ganadores[i] != 0 ->
			ganador := ganadores[i]
			; continuar := false
		[] ganadores[i] == 0 ->
			skip
		fi
		i := i + 1
	od
]

proc resaltarGanador(in fila, columna, color)
// Resalta las fichas que se encuentran en 4 en linea
{ Precondición: fila >= 0 /\ columna >= 0}
{ Postcondición: Se resalta el circulo de la casilla posicionada en la fila "fila" y columna "columna" del tablero de color "color" }

func verificarHorizontal(filas: int, columnas:int, tablero: array) -> int
{ Precondición: filas >= 4 /\ columnas >= 4 /\ (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | 0 <= tablero[i][j] <= 2 %) }
{ Postcondición: (% exist i,j : int | 0 <= i < filas /\ 0 <= j < columnas - 3 | tablero[i][j] == tablero[i][j+1] == tablero[i][j+2] == tablero[i][j+3] %) == hay4enLinea }
// Verifica si existe una linea horizontal
[
	VAR
		i: int;													// Variable auxiliar para iterar
		j: int;													// Variable auxiliar para iterar
		hay4enLinea: boolean;									// Variable que determina si hay 4 en linea
		ganador: int;											// Variable que al almacena el ganador de la partida actual, (en caso de ser distinto de 0)

	i := 0;
	hay4enLinea := false
	{ Cota t1: filas - i }
	do i != filas ->
	
		j := 0

		{ Cota t2: columnas - 3 - j }
		do j != columnas - 3 ->

			if (tablero[i][j] == tablero[i][j+1] == tablero[i][j+2] == tablero[i][j+3]) == true /\ tablero[i][j] != 0 ->
				ganador := tablero[i][j];
				resaltarGanador(i, j, amarillo)
				resaltarGanador(i, j+1, amarillo)
				resaltarGanador(i, j+2, amarillo)
				resaltarGanador(i, j+3, amarillo)
				hay4enLinea := true
			[] (tablero[i][j] == tablero[i][j+1] == tablero[i][j+2] == tablero[i][j+3]) == false \/ tablero[i][j] == 0 ->
				ganador := 0
			fi

			; j := j + 1
		od

		; i := i + 1
	od

	>> ganador
]

func verificarVertical(filas: int, columnas:int, tablero: array) -> int
{ Precondición: filas >= 4 /\ columnas >= 4 /\ (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | 0 <= tablero[i][j] <= 2 %)}
{ Postcondición: (% exist i,j : int | 0 <= i < columnas /\ 0 <= j < filas - 3 | tablero[j][i] == tablero[j+1][i] == tablero[j+2][i] == tablero[j+3][i] %) == hay4enLinea }
// Verifica si  existe una linea vertical
[
	VAR
		i: int;													// Variable auxiliar para iterar
		j: int;													// Variable auxiliar para iterar
		hay4enLinea: boolean;									// Variable que determina si hay 4 en linea
		ganador: int;											// Variable que al almacena el ganador de la partida actual, (en caso de ser distinto de 0)

	i := 0;
	hay4enLinea := false
	{ Cota t1: columnas - i }
	do i != columnas ->
		j := 0		
		{ Cota t2: filas - 3 - j }
		do j != filas - 3 ->

			if (tablero[j][i] == tablero[j+1][i] == tablero[j+2][i] == tablero[j+3][i]) == true /\ tablero[i][j] != 0 ->
				ganador := tablero[j][i];
				resaltarGanador(j, i, amarillo)
				resaltarGanador(j+1, i, amarillo)
				resaltarGanador(j+2, i, amarillo)
				resaltarGanador(j+3, i, amarillo)
				hay4enLinea := true
			[] (tablero[j][i] == tablero[j+1][i] == tablero[j+2][i] == tablero[j+3][i]) == false \/ tablero[i][j] == 0 ->
				ganador := 0
			fi		

			; j := j + 1
		od

		; i := i + 1
	od

	>> ganador
]

func verificarDiagonalDerecha(filas: int, columnas:int, tablero: array) -> int
{ Precondicion: filas >= 4 /\ columnas >= 4 /\ (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | 0 <= tablero[i][j] <= 2 %) }
{ Postcondición: (% exist i,j : int | 0 <= i < filas - 3 /\ 0 <= j < columnas - 3 | tablero[i][j] == tablero[i+1][j+1] == tablero[i+2][j+2] == tablero[i+3][j+3] %) == hay4enLinea }
// Verifica si existe una linea diagonal derecha
[
	VAR
		i: int;													// Variable auxiliar para iterar
		j: int;													// Variable auxiliar para iterar
		hay4enLinea: boolean;									// Variable que determina si hay 4 en linea
		ganador: int;											// Variable que al almacena el ganador de la partida actual, (en caso de ser distinto de 0)

	i := 0;
	hay4enLinea := false
	{ Cota t1: filas - 3 - i}
	do i != filas - 3 ->
		j := 0
		{ Cota t2: columnas - 3 - j}
		do j != columnas - 3 ->
			if (tablero[i][j] == tablero[i+1][j+1] == tablero[i+2][j+2] == tablero[i+3][j+3]) == true /\ tablero[i][j] != 0 ->
				ganador := tablero[i][j];
				resaltarGanador(i, j, amarillo)
				resaltarGanador(i+1, j+1, amarillo)
				resaltarGanador(i+2, j+2, amarillo)
				resaltarGanador(i+3, j+3, amarillo)
				hay4enLinea := true
			[] (tablero[i][j] == tablero[i+1][j+1] == tablero[i+2][j+2] == tablero[i+3][j+3]) == false \/ tablero[i][j] == 0 ->
				ganador := 0
			fi

			; j := j + 1
		od

		; i := i + 1
	od

	>> ganador
]

func verificarDiagonalIzquierda(filas: int, columnas:int, tablero: array) -> int
{ Precondición: filas >= 4 /\ columnas >= 4 /\ (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | 0 <= tablero[i][j] <= 2 %) }
{ Postcondición: (% exist i,j : int | 3 <= i < columnas /\ 0 <= j < filas - 3 | tablero[j][i] == tablero[j+1][i-1] == tablero[j+2][i-2] == tablero[j+3][i-3] %) == hay4enLinea}
// Verifica si existe una linea diagonal izquierda
[
	VAR
		i: int;													// Variable auxiliar para iterar
		j: int;													// Variable auxiliar para iterar
		hay4enLinea: boolean;									// Variable que determina si hay 4 en linea
		ganador: int;											// Variable que al almacena el ganador de la partida actual, (en caso de ser distinto de 0)

	i := 3;
	hay4enLinea := false
	{ Cota t1: columnas - i }
	do i != columnas ->
		j := 0
		{ Cota t2: filas - 3 - j }
		do j != filas - 3 ->
			if (tablero[j][i] == tablero[j+1][i-1] == tablero[j+2][i-2] == tablero[j+3][i-3]) == true /\ tablero[i][j] != 0 ->
				ganador := tablero[j][i];
				resaltarGanador(i, j, amarillo)
				resaltarGanador(i+1, j-1, amarillo)
				resaltarGanador(i+2, j-2, amarillo)
				resaltarGanador(i+3, j-3, amarillo)
				hay4enLinea := true
			[] (tablero[j][i] == tablero[j+1][i-1] == tablero[j+2][i-2] == tablero[j+3][i-3]) == false \/ tablero[i][j] == 0 ->
				ganador := 0
			fi

			; j := j + 1
		od

		; i := i + 1
	od

	>> ganador
]

func verificarTablero(numJugadas: int, filas: int, columnas:int) -> boolean
{ Precondición: filas >= 4 /\ columnas >= 4 /\ numJugadas <= filas * columnas}
{ Postcondición: (numJugadas != filas * columnas \/ continuar == false) /\ (numJugadas == filas * columnas \/ continuar == true)}
// Verifica si el tablero está lleno
[
	VAR 
		continuar: boolean;								// Variable que determina si la partida ha finalizado o no

	if numJugadas == filas * columnas ->
		continuar := false
	[] numJugadas != filas * columnas ->
		continuar := true
	fi 

	>> continuar
]

func jugadaPC(filas: int, columnas: int, numJugadasPC: int, tablero: array, ultimaJugada: array) -> int
{ Precondición: filas >= 4 /\ columnas >= 4 /\ numJugadas >= 0 /\ (% forall i,j : int | 0 <= i <= filas /\ 0 <= j <= columnas | 0 <= tablero[i][j] <= 2 %) }
{ Postcondición: 0 <= jugada < columnas}
// Inteligencia Artificial del computador
[
	CONST
		intentosMaximos: int;									// Numero maximo de intentos que puede hacer la computadora de intentar con varias estrategias antes de jugar random 

	VAR
		puedeJugar: boolean;									// Variable que determina si las estrategias comprobadas pueden llevarse a cabo
		estrategia: int;										// Variable que almacena la estrategia a llevar a cabo por la computadora
		jugada: int;											// Variable que almacena la columna en la que se desea jugar	
		i: int;													// Variable auxiliar para realizar la iteracion
		
	puedeJugar := false

	if numJugadasPC == 0 ->
		jugada := randomJugadaPC(columnas)
		estrategia := randomEstrategia()
	[] numJugadasPC != 0 ->
		{ Cota: intentosMaximos - i}
		do puedeJugar == false /\ i != intentosMaximos ->

			if estrategia == 0 -> // Vertical

				compruebaJugadaVertical(ultimaJugada, tablero; jugada, puedeJugar, estrategi)

			[] estrategia == 1 -> // Horizontal Derecha

				compruebaJugadaHorizontalDerecha(ultimaJugada, tablero, columnas; jugada, puedeJugar, estrategia)

			[] estrategia == 2 -> // Horizontal Izquierda

				compruebaJugadaHorizontalIzquierda(ultimaJugada, tablero; jugada, puedeJugar, estrategia)	

			[] estrategia == 3 -> // Diagonal derecha abajo
				
				compruebaJugadaDiagonalDerechaAbajo(ultimaJugada, tablero, columnas, filas; jugada, puedeJugar, estrategia)
			
			[] estrategia == 4 -> // Diagonal derecha arriba

				compruebaJugadaDiagonalDerechaArriba(ultimaJugada, tablero; jugada, puedeJugar, estrategia)

			[] estrategia == 5 -> // Diagonal izquierda abajo

				compruebaJugadaDiagonalIzquierdaAbajo(ultimaJugada, tablero, filas; jugada, puedeJugar, estrategia)

			[] estrategia == 6 -> // Diagonal izquierda arriba

				compruebaJugadaDiagonalIzquierdaArriba(ultimaJugada, tablero; jugada, puedeJugar, estrategia)

			fi

			; i := i + 1

		od

		if jugada == -1 ->
			jugada := randomJugadaPC(columnas)
		[] jugada != -1 ->
			skip
		fi
	fi

	>> jugada
]

proc compruebaJugadaVertical(in ultimaJugada: array, tablero: array, out jugada:int, puedeJugar:boolean, estrategia:int)
{ Precondición: 0 <= ultimaJugada[0] < filas /\ 0 <= ultimaJugada[1] < columnas /\ (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | 0 <= tablero[i][j] <= 2  %) }
{ Postcondición: (ultimaJugada[0] == 0 \/ (( tablero[ultimaJugada[0] - 1][ultimaJugada[1]] != 0 \/ (puedeJugar == true /\ jugada == ultimaJugada[1])) /\
				 (tablero[ultimaJugada[0] - 1][ultimaJugada[1]] == 0 \/ (puedeJugar == false /\ jugada == -1)))) /\ (ultimaJugada[0] != 0 \/ (jugada == -1 /\ puedeJugar == false)) }
// Verifica si puede jugar en la casilla de arriba
[
	if ultimaJugada[0] != 0 ->
		if tablero[ultimaJugada[0] - 1][ultimaJugada[1]] == 0 ->
			jugada := ultimaJugada[1]
			puedeJugar := true
		[] tablero[ultimaJugada[0] - 1][ultimaJugada[1]] != 0 ->
			jugada := -1
			estrategia := randomEstrategia()
			puedeJugar := false
		fi
	[] ultimaJugada[0] == 0 ->
		jugada := -1
		estrategia := randomEstrategia()
		puedeJugar := false
	fi
]

proc compruebaJugadaHorizontalDerecha(in ultimaJugada: array, tablero: array, columnas:int, out jugada:int, puedeJugar:boolean, estrategia:int)
{ Precondición: 0 <= ultimaJugada[0] < filas /\ 0 <= ultimaJugada[1] < columnas /\ (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | 0 <= tablero[i][j] <= 2  %) }
{ Postcondición: (ultimaJugada[1] == columnas - 1 \/ (( tablero[ultimaJugada[0]][ultimaJugada[1] + 1 ] != 0 \/ (puedeJugar == true /\ jugada == ultimaJugada[1] + 1)) /\
				 (tablero[ultimaJugada[0]][ultimaJugada[1] + 1] == 0 \/ (puedeJugar == false /\ jugada == -1)))) /\ (ultimaJugada[1] != columnas - 1 \/ (jugada == -1 /\ puedeJugar == false)) }
// Verifica si puede jugar en la casilla de la dereccha
	if ultimaJugada[1] != columnas - 1 ->
		if tablero[ultimaJugada[0]][ultimaJugada[1] + 1] == 0 ->
			jugada := ultimaJugada[1] + 1
			puedeJugar := true
		[] tablero[ultimaJugada[0]][ultimaJugada[1] + 1] != 0 ->
			jugada := -1
			estrategia := randomEstrategia()
			puedeJugar := false
		fi
	[] ultimaJugada[1] == columnas - 1 ->
		jugada := -1
		estrategia := randomEstrategia()
		puedeJugar := false
	fi
]

proc compruebaJugadaHorizontalIzquierda(in ultimaJugada: array, tablero: array, out jugada:int, puedeJugar:boolean, estrategia:int)
{ Precondición: 0 <= ultimaJugada[0] < filas /\ 0 <= ultimaJugada[1] < columnas /\ (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | 0 <= tablero[i][j] <= 2  %) }
{ Postcondición: (ultimaJugada[1] == 0 \/ (( tablero[ultimaJugada[0]][ultimaJugada[1] - 1 ] != 0 \/ (puedeJugar == true /\ jugada == ultimaJugada[1] - 1)) /\
				 (tablero[ultimaJugada[0]][ultimaJugada[1] - 1] == 0 \/ (puedeJugar == false /\ jugada == -1)))) /\ (ultimaJugada[1] != 0 \/ (jugada == -1 /\ puedeJugar == false)) }
// Verifica si puede jugar en la casilla de la izquierda
[
	if ultimaJugada[1] != 0 ->
		if tablero[ultimaJugada[0]][ultimaJugada[1] - 1] == 0 ->
			jugada := ultimaJugada[1] - 1
			puedeJugar := true
		[] tablero[ultimaJugada[0]][ultimaJugada[1] - 1] != 0 ->
			jugada := -1
			estrategia := randomEstrategia()
			puedeJugar := false
		fi
	[] ultimaJugada[1] == 0 ->
		jugada := -1
		estrategia := randomEstrategia()
		puedeJugar := false
	fi
]

proc compruebaJugadaDiagonalDerechaAbajo(in ultimaJugada: array, tablero: array, columnas:int, filas:int, out jugada:int, puedeJugar:boolean, estrategia:int)
{ Precondición: 0 <= ultimaJugada[0] < filas /\ 0 <= ultimaJugada[1] < columnas /\ (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | 0 <= tablero[i][j] <= 2  %) }
{ Postcondición: ((ultimaJugada[0] == filas - 1 \/ ultimaJugada[1] == columnas - 1 ) \/ (( tablero[ultimaJugada[0] + 1][ultimaJugada[1] + 1 ] != 0 \/ (puedeJugar == true /\ jugada == ultimaJugada[1] + 1)) /\
				 (tablero[ultimaJugada[0] + 1][ultimaJugada[1] + 1] == 0 \/ (puedeJugar == false /\ jugada == -1)))) /\ ((ultimaJugada[0] != filas - 1 /\ ultimaJugada[1] != columnas -1) \/ (jugada == -1 /\ puedeJugar == false)) }
// Verifica si puede jugar en la casilla inferior derecha
[
	if ultimaJugada[0] == filas - 1 \/ ultimaJugada[1] == columnas - 1 ->
		jugada := -1
		estrategia := randomEstrategia()
		puedeJugar := false
	[] ultimaJugada[0] != filas - 1 /\ ultimaJugada[1] != columnas - 1 ->
		if tablero[ultimaJugada[0] + 1][ultimaJugada[1] + 1] == 0 ->
			jugada := ultimaJugada[1] + 1
			puedeJugar := true
		[] tablero[ultimaJugada[0] + 1][ultimaJugada[1] + 1] != 0 ->
			jugada := -1
			estrategia := randomEstrategia()
			puedeJugar := false
		fi
	fi
]

proc compruebaJugadaDiagonalDerechaArriba(in ultimaJugada: array, tablero: array, out jugada:int, puedeJugar:boolean, estrategia:int)
{ Precondición: 0 <= ultimaJugada[0] < filas /\ 0 <= ultimaJugada[1] < columnas /\ (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | 0 <= tablero[i][j] <= 2  %) }
{ Postcondición: ((ultimaJugada[0] == 0 \/ ultimaJugada[1] == 0 ) \/ (( tablero[ultimaJugada[0] - 1][ultimaJugada[1] - 1 ] != 0 \/ (puedeJugar == true /\ jugada == ultimaJugada[1] - 1)) /\
				 (tablero[ultimaJugada[0] - 1][ultimaJugada[1] - 1] == 0 \/ (puedeJugar == false /\ jugada == -1)))) /\ ((ultimaJugada[0] != 0 /\ ultimaJugada[1] != 0) \/ (jugada == -1 /\ puedeJugar == false)) }
// Verifica si puede jugar en la casilla superior derecha
[
	if ultimaJugada[0] == 0 \/ ultimaJugada[1] == 0 ->
		jugada := -1
		estrategia := randomEstrategia()
		puedeJugar := false
	[] ultimaJugada[0] != 0 /\ ultimaJugada[1] != 0 ->
		if tablero[ultimaJugada[0] - 1][ultimaJugada[1] - 1] == 0 ->
			jugada := ultimaJugada[1] - 1
			puedeJugar := true
		[] tablero[ultimaJugada[0] - 1][ultimaJugada[1] - 1] != 0 ->
			jugada := -1
			estrategia := randomEstrategia()
			puedeJugar := false
		fi
	fi
]

proc compruebaJugadaDiagonalIzquierdaAbajo(in ultimaJugada: array, tablero: array, filas:int, out jugada:int, puedeJugar:boolean, estrategia:int)
{ Precondición: 0 <= ultimaJugada[0] < filas /\ 0 <= ultimaJugada[1] < columnas /\ (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | 0 <= tablero[i][j] <= 2  %) }
{ Postcondición: ((ultimaJugada[0] == filas - 1 \/ ultimaJugada[1] == 0 ) \/ (( tablero[ultimaJugada[0] + 1][ultimaJugada[1] - 1 ] != 0 \/ (puedeJugar == true /\ jugada == ultimaJugada[1] - 1)) /\
				 (tablero[ultimaJugada[0] + 1][ultimaJugada[1] - 1] == 0 \/ (puedeJugar == false /\ jugada == -1)))) /\ ((ultimaJugada[0] != filas - 1 /\ ultimaJugada[1] != 0) \/ (jugada == -1 /\ puedeJugar == false)) }
// Verifica si puede jugar en la casilla inferior izquierda
[
	if ultimaJugada[0] == filas - 1 \/ ultimaJugada[1] == 0 ->
		jugada := -1
		estrategia := randomEstrategia()
		puedeJugar := false
	[] ultimaJugada[0] != filas - 1 /\ ultimaJugada[1] != 0 ->
		if tablero[ultimaJugada[0] + 1][ultimaJugada[1] - 1] == 0 ->
			jugada := ultimaJugada[1] - 1
			puedeJugar := true
		[] tablero[ultimaJugada[0] + 1][ultimaJugada[1] - 1] != 0 ->
			jugada := -1
			estrategia := randomEstrategia()
			puedeJugar := false
		fi
	fi
]

proc compruebaJugadaDiagonalIzquierdaArriba(in ultimaJugada: array, tablero: array, columnas: int, out jugada:int, puedeJugar:boolean, estrategia:int)
{ Precondición: 0 <= ultimaJugada[0] < filas /\ 0 <= ultimaJugada[1] < columnas /\ (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | 0 <= tablero[i][j] <= 2  %) }
{ Postcondición: ((ultimaJugada[0] == 0 \/ ultimaJugada[1] == columnas - 1 ) \/ (( tablero[ultimaJugada[0] - 1][ultimaJugada[1] + 1 ] != 0 \/ (puedeJugar == true /\ jugada == ultimaJugada[1] + 1)) /\
				 (tablero[ultimaJugada[0] - 1][ultimaJugada[1] + 1] == 0 \/ (puedeJugar == false /\ jugada == -1)))) /\ ((ultimaJugada[0] != 0 /\ ultimaJugada[1] != columnas -1) \/ (jugada == -1 /\ puedeJugar == false)) }
// Verifica si puede jugar en la casilla superior izquierda
[
	if ultimaJugada[0] == 0 \/ ultimaJugada[1] == columnas - 1 ->
		jugada := -1
		estrategia := randomEstrategia()
		puedeJugar := false
	[] ultimaJugada[0] != 0 /\ ultimaJugada[1] != columnas - 1 ->
		if tablero[ultimaJugada[0] - 1][ultimaJugada[1] + 1] == 0 ->
			jugada := ultimaJugada[1] + 1
			puedeJugar := true
		[] tablero[ultimaJugada[0] - 1][ultimaJugada[1] + 1] != 0 ->
			jugada := -1
			estrategia := randomEstrategia()
			puedeJugar := false
		fi
	fi
]

func randomEstrategia() -> int
{ Precondición: true}
{ Postcondición 0 <= estrategia < 7}
// Devuelve una estrategia aleatoria
[
	VAR
		estrategia: int;										// Variable que almacena la estrategia a llevar a cabo por la computadora

	if true ->
		estrategia := 0
	[] true ->
		estrategia := 1
	[] true ->
		estrategia := 2
	[] true ->
		estrategia := 3
	[] true ->
		estrategia := 4
	[] true ->
		estrategia := 5
	[] true ->
		estrategia := 6
	fi

	>> estrategia
]

func randomjugadaPC(columnas: int) -> int
{ Precondición: true}
{ Postcondición: 0 <= jugada < columnas}
// Devuelva una columna aleatoriamente, deben verificar el número de columnas.
[
	VAR
		jugada: int;											// Variable que almacena la columna donde se desea jugar								

	if true ->
		jugada := 0
	[] true ->
		jugada := 1
	[] true ->
		jugada := 2
	[] true ->
		jugada := 3
	[] true -> 
		jugada := 4
	[] true ->
		jugada := 5
	[] true ->
		jugada := 6
	fi

	>> jugada
]

