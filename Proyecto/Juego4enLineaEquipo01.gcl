{ 
  Juego4enLineaEquipo01.gcl

  DESCRIPCIÓN: 

  Autores: 
 	  Manuel Faria 15-10463
 	  Juan Oropeza 15-11041

}

[ MAIN
	CONST
		filas:int;
		columnas: int;
	VAR
		tablero: array [0,filas) x [0,columnas) of int;
		dificultad: int;
		ultimoGanador: int;
		jugador: int;
		numPartidas: int;
		jugada: int;
		continuar: boolean;
		numJugadas: int;
		numEmpates: int;
		partidasGanadasPersona: int;
		partidasGanadasPC: int;

	numJugadas:= 0
	;numPartidas := 0
	; partidasGanadasPC := 0
	; partidasGanadasPersona := 0
	; ultimoGanador := 0
	; continuar := true
	; numEmpates := 0

	; inicializarPartida(numPartidas, ultimoGanador)
	

	{ Cota: }
	do continuar == true ->
		; jugada := obtenerJugada(columnas)

		if validarJugada(jugada, filas, columnas, tablero) == true ->
			reflejarJugada(jugada, jugador, filas, columnas, tablero)
			; jugador := cambiarTurno(jugador)
			; numJugadas := numJugadas + 1

			continuar, ganador := verificar4enLinea(filas,columnas,tablero)
			
			if continuar == true ->
				continuar := verificarTablero(numJugadas, filas, columnas)

				if continuar == false ->
					numEmpates := numEmpates +1
				[] continuar == true ->
					skip

			[] continuar == false ->
				if ganador == 1 ->
					ultimoGanador := ganador
					partidasGanadasPersona := partidasGanadasPersona + 1
				[] ganador == 2 ->
					ultimoGanador := ganador
					partidasGanadasPC := partidasGanadasPC + 1
				[] ganador != 1 /\ ganador != 2 ->
					skip
				fi
				; numPartidas := numPartidas + 1
			fi

		[] validarJugada(jugada, filas, columnas, tablero) == false ->
			abort
		fi
	od

	Despl



]

proc inicializarPartida(in numPartidas: int, in ultimoGanador: int, in filas: int, in columnas: int, in-out tablero: array,out numJugadas: int, out jugador: int)
{ Precondición: numPartidas >= 0 /\ 0 <= ultimoGanador <= 2 /\ filas >= 0 /\ columnas >= 0}
{ Postcondición: (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | tablero[i][j] == 0 %) }
[
	inicializarTablero(filas, columnas)
	dificultad := dificultad()
	jugador := definirPrimero(numPartidas, ultimoGanador)
	numJugadas := 0
]

proc inicializarTablero(in filas: int, in columnas: int, out tablero: array)

	{ Precondición: filas >= 4 /\ columnas >= 4 }
	{ Postcondición: (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | tablero[i][j] == 0 %) /\ 0 <= dificultad <= 1 
					 /\ (numPartidas != 0 \/ primerJugador == 1) /\ (numPartidas == 0 \/ primerJugador == ultimoGanador) }

[
	VAR
		tablero: array [0,filas) x [0,columnas) of int;
		i: int;
		j: int;

	i := 0

	{ Cota T: filas - i }
	do i != filas ->

		j := 0

		{ Cota t2: columnas - j }

		do j != columnas ->
			tablero[i][j] := 0

			;j := j + 1
		od

		i := i + 1
	od

]

func dificultad() -> (int)
{ Precondición: true }
{ Postcondición: 0 <= dificultad <= 1 }
[
	CONST
		dificultad: int;

	>> dificultad
]

func definirPrimero(numPartidas:int, ultimoGanador: int) -> (int)
{ Precondición: numPartidas >= 0 /\ 0 <= ultimoGanador <= 2}
{ Postcondición: (numPartidas != 0 \/ primerJugador == 1) /\ (numPartidas == 0 \/ primerJugador == ultimoGanador) }
[
	VAR 
		primerJugador: int;

	if numPartidas == 0 ->
		primerJugador := 1
	[] numPartidas != 0 ->
		primerJugador := ultimoGanador
	fi

	>> primerJugador
]

func obtenerJugada(columnas: int, jugador: int, dificultad: int) -> int
{ Precondición: columnas >= 4 /\ 1 <= jugador <= 2 /\ 0 <= dificultad <= 1 }
{ Postcondición: 0 <= jugada <= columnas }
[
	CONST
		jugadaPersona: int;
	VAR
		jugadaPC: int;

	if jugador == 2 ->
		if dificultad == 0 ->
			if true ->
				jugadaPC := 0
			[] true ->
				jugadaPC := 1
			[] true ->
				jugadaPC := 2
			[] true ->
				jugadaPC := 3
			[] true -> 
				jugadaPC := 4
			[] true ->
				jugadaPC := 5
			[] true ->
				jugadaPC := 6
			fi

			; jugada:= jugadaPC

		[] dificultad == 1 ->
			jugadaDePC()
		fi
	[] jugador == 1 ->
		jugada := jugadaPersona
	fi

	>> jugada
]

func validarJugada(jugada: int, filas: int, columnas: int, tablero: array) -> boolean
{ Precondición: 0 <= jugada < columnas /\ filas >= 4 /\ columnas >= 4}
{ Postcondición: (% exist i : int | 0 <= i < filas | tablero[i][jugada] == 0  %) == validacion }
[
	VAR 
		validacion: boolean;
		i: int;

	i := 0

	; validacion := false
	
	{ Cota t: filas - i }
	do i != filas ->
		if tablero[i][jugada] == 0 ->
			validacion := true
		[] tablero[i][jugada] != 0 ->
			skip
		fi

		; i := i + 1
	od

	>> validacion
]

proc reflejarJugada(in jugada: int, in jugador: int, in filas: int, in columnas:int, in-out tablero: array)
{ Precondición: 1 <= jugador <= 2 /\ 0 <= jugada < columnas /\ filas >= 4 /\ columnas >= 4}
{ Postcondición: (% exist i : int | 0 <= i < filas | tablero[i][jugada] == jugador %)}
[
	i := filas - 1

	{ Cota t: i }
	do i != -1 ->
		if tablero[i][jugada] == 0 ->
			tablero[i][jugada] := jugador
		[] tablero[i][jugada] != 0 ->
			skip
		fi

		; i := i - 1
	od
]

func cambiarTurno(jugador) -> int
{ Precondición: 1 <= jugador <= 2 }
{ Postcondición: (jugador != 1 \/ jugador ==2) /\ (jugador != 2 \/ jugador == 1) }
[
	if jugador == 1 ->
		jugador := 2
	[] jugador == 2 ->
		jugador := 1
	fi

	>> jugador
]

func verificar4enLinea(filas: int,columnas: int, tablero: array) -> (boolean, int)
{ Precondicion: filas >= 4 /\ columnas >= 4 /\ (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | 0 <= tablero[i][j] <= 2 %) }
{ Postcondición: (% exist i : int | 0 <= i < 4 | ganadores[i] != 0 /\ ganador == ganadores[i]  %) == (continuar == false) }
[
	VAR
		ganador: int;
		ganadores: array[0,4) of int;

	ganadores := [verificarHorizontal(filas, columnas, tablero), verificarVertical(filas, columnas, tablero), verificarDiagonalDerecha(filas, columnas, tablero), verificarDiagonalIzquierda(filas, columnas, tablero)]
	; i := 0

	do i != 4 ->
		if ganadores[i] != 0 ->
			ganador := ganadores[i]
			; continuar := false
		[] ganadores[i] == 0 ->
			ganador := 0	
			; continuar := false
		fi
		i := i + 1
	od

	>> (continuar, ganador)
]

func verificarHorizontal(filas: int, columnas:int, tablero: array) -> int
{ Precondición: filas >= 4 /\ columnas >= 4 /\ (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | 0 <= tablero[i][j] <= 2 %)}
{ Postcondición: (% exist i,j : int | 0 <= i < filas /\ 0 <= j < columnas - 3 | tablero[i][j] == tablero[i][j+1] == tablero[i][j+2] == tablero[i][j+3] %) == hay4enLinea }
[
	i := 0
	{ Cota t1: filas - i }
	do i != filas ->
		j := 0

		{ Cota t2: columnas - 3 - j }
		do j != columnas - 3 ->

			if (tablero[i][j] == tablero[i][j+1] == tablero[i][j+2] == tablero[i][j+3]) == true ->
				ganador := tablero[i][j]
			[] (tablero[i][j] == tablero[i][j+1] == tablero[i][j+2] == tablero[i][j+3]) == false ->
				ganador := 0
			fi


			; j := j + 1
		od

		; i := i + 1
	od

	>> ganador
]

func verificarVertical(filas: int, columnas:int, tablero: array) -> int
{ Precondición: filas >= 4 /\ columnas >= 4 /\ (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | 0 <= tablero[i][j] <= 2 %)}
{ Postcondición: (% exist i,j : int | 0 <= i < columnas /\ 0 <= j < filas - 3 | tablero[j][i] == tablero[j+1][i] == tablero[j+2][i] == tablero[j+3][i] %) == hay4enLinea }
[
	i := 0
	{ Cota t1: columnas - i }
	do i != columnas ->
		j := 0		
		{ Cota t2: filas - 3 - j }
		do j != filas - 3 ->

			if (tablero[j][i] == tablero[j+1][i] == tablero[j+2][i] == tablero[j+3][i]) == true ->
				ganador := tablero[j][i]
			[] (tablero[j][i] == tablero[j+1][i] == tablero[j+2][i] == tablero[j+3][i]) == false ->
				ganador := 0
			fi		

			; j := j + 1
		od

		; i := i + 1
	od

	>> ganador
]

func verificarDiagonalDerecha(filas: int, columnas:int, tablero: array) -> int
{ Precondicion: filas >= 4 /\ columnas >= 4 /\ (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | 0 <= tablero[i][j] <= 2 %) }
{ Postcondición: (% exist i,j : int | 0 <= i < filas - 3 /\ 0 <= j < columnas - 3 | tablero[i][j] == tablero[i+1][j+1] == tablero[i+2][j+2] == tablero[i+3][j+3] %) == hay4enLinea }
[
	i := 0
	{ Cota t1: filas - 3 - i}
	do i != filas - 3 ->
		j := 0
		{ Cota t2: columnas - 3 - j}
		do j != columnas - 3 ->
			if (tablero[i][j] == tablero[i+1][j+1] == tablero[i+2][j+2] == tablero[i+3][j+3]) == true ->
				ganador := tablero[i][j]
			[] (tablero[i][j] == tablero[i+1][j+1] == tablero[i+2][j+2] == tablero[i+3][j+3]) == false ->
				ganador := 0
			fi

			; j := j + 1
		od

		; i := i + 1
	od

	>> ganador
]

func verificarDiagonalIzquierda(filas: int, columnas:int, tablero: array) -> int
{ Precondición: filas >= 4 /\ columnas >= 4 /\ (% forall i,j : int | 0 <= i < filas /\ 0 <= j < columnas | 0 <= tablero[i][j] <= 2 %) }
{ Postcondición: (% exist i,j : int | 3 <= i < columnas /\ 0 <= j < filas - 3 | tablero[j][i] == tablero[j+1][i-1] == tablero[j+2][i-2] == tablero[j+3][i-3] %) == hay4enLinea}
[
	i := 3
	{ Cota t1: columnas - i }
	do i != columnas ->
		j := 0
		{ Cota t2: filas - 3 - j }
		do j != filas - 3 ->
			if (tablero[j][i] == tablero[j+1][i-1] == tablero[j+2][i-2] == tablero[j+3][i-3]) == true ->
				ganador := tablero[j][i]
			[] (tablero[j][i] == tablero[j+1][i-1] == tablero[j+2][i-2] == tablero[j+3][i-3]) == false ->
				ganador := 0
			fi

			; j := j + 1
		od

		; i := i + 1
	od

	>> ganador
]

func verificarTablero(numJugadas: int, filas: int, columnas:int) -> boolean
{ Precondición: filas >= 4 /\ columnas >= 4 /\ numJugadas <= filas * columnas}
{ Postcondición: (numJugadas != filas * columnas \/ continuar == false) /\ (numJugadas == filas * columnas \/ continuar == true)}
[
	if numJugadas == filas * columnas ->
		continuar := false
	[] numJugadas != filas * columnas ->
		continuar := true
	fi 

	>> continuar
]

func jugadaDePC(filas: int, columnas: int, numJugadas: int, tablero: int, ultimaJugada: int)
{}
{}
[
	if numJugadas == 0 ->
		jugada := randomJugadaPC()
	[] numJugadas != 0 ->
		if estrategia == 0 /\ ultimaJugada[0] > 2 ->
			if  ultimaJugada[0] > 2 ->
				if (tablero[ultimaJugada[0] - 1][ultimaJugada[1]] == 0 /\ tablero[ultimaJugada[0] - 2][ultimaJugada[1]] == 0 tablero[ultimaJugada[0] - 3][ultimaJugada[1]] == 0) == true -> 
					jugada := ultimaJugada[1]
				[] (tablero[ultimaJugada[0] - 1][ultimaJugada[1]] == 0 /\ tablero[ultimaJugada[0] - 2][ultimaJugada[1]] == 0 tablero[ultimaJugada[0] - 3][ultimaJugada[1]] == 0) == false ->
					estrategia := randomEstrategia()
					juagada := randomJugadaPC()
				fi
			[] ultimaJugada[0] <= 2 ->
				estrategia := randomEstrategia()
				juagada := randomJugadaPC()
			fi
		[] estrategia == 1 ->
			if ultimaJugada[0] != filas - 1 ->
				if ultimaJugada[1] < columnas - 3 ->
					if (tablero[ultimaJugada[0]][ultimaJugada[1] + 1] == 0 /\ tablero[ultimaJugada[0]][ultimaJugada[1] + 2] == 0 /\ tablero[ultimaJugada[0]][ultimaJugada[1] + 3] == 0) == true ->
						if (tablero[ultimaJugada[0] + 1][ultimaJugada[1] + 1] != 0 /\ tablero[ultimaJugada[0] + 1][ultimaJugada[1] + 2] != 0 /\ tablero[ultimaJugada[0] + 1][ultimaJugada[1] + 3] != 0) == true ->
							jugada := ultimaJugada[1] + 1
						[] (tablero[ultimaJugada[0] + 1][ultimaJugada[1] + 1] != 0 /\ tablero[ultimaJugada[0] + 1][ultimaJugada[1] + 2] != 0 /\ tablero[ultimaJugada[0] + 1][ultimaJugada[1] + 3] != 0) == false ->
							estrategia := randomEstrategia()
							juagada := randomJugadaPC()
						fi
					[] (tablero[ultimaJugada[0]][ultimaJugada[1] + 1] == 0 /\ tablero[ultimaJugada[0]][ultimaJugada[1] + 2] == 0 /\ tablero[ultimaJugada[0]][ultimaJugada[1] + 3] == 0) == false ->
						estrategia := randomEstrategia()
						juagada := randomJugadaPC()
					fi
				[] ultimaJugada[1] => columnas - 3 ->
					if (tablero[ultimaJugada[0]][ultimaJugada[1] - 1] == 0 /\ tablero[ultimaJugada[0]][ultimaJugada[1] - 2] == 0 /\ tablero[ultimaJugada[0]][ultimaJugada[1] - 3] == 0) == true ->
						if (tablero[ultimaJugada[0] + 1][ultimaJugada[1] - 1] != 0 /\ tablero[ultimaJugada[0] + 1][ultimaJugada[1] - 2] != 0 /\ tablero[ultimaJugada[0] + 1][ultimaJugada[1] - 3] != 0) == true ->
							jugada := ultimaJugada[1] - 1
						[] (tablero[ultimaJugada[0] + 1][ultimaJugada[1] - 1] != 0 /\ tablero[ultimaJugada[0] + 1][ultimaJugada[1] - 2] != 0 /\ tablero[ultimaJugada[0] + 1][ultimaJugada[1] - 3] != 0) == false ->
							estrategia := randomEstrategia()
							juagada := randomJugadaPC()
						fi
					[] (tablero[ultimaJugada[0]][ultimaJugada[1] - 1] == 0 /\ tablero[ultimaJugada[0]][ultimaJugada[1] - 2] == 0 /\ tablero[ultimaJugada[0]][ultimaJugada[1] - 3] == 0) == false ->
						estrategia := randomEstrategia()
						juagada := randomJugadaPC()
					fi
				fi
			[] ultimaJugada[0] == filas - 1 ->
				if ultimaJugada[1] < columnas - 3 ->
					if (tablero[ultimaJugada[0]][ultimaJugada[1] + 1] == 0 /\ tablero[ultimaJugada[0]][ultimaJugada[1] + 2] == 0 /\ tablero[ultimaJugada[0]][ultimaJugada[1] + 3] == 0) == true ->
						jugada := ultimaJugada[1] + 1
					[] (tablero[ultimaJugada[0]][ultimaJugada[1] + 1] == 0 /\ tablero[ultimaJugada[0]][ultimaJugada[1] + 2] == 0 /\ tablero[ultimaJugada[0]][ultimaJugada[1] + 3] == 0) == false ->
						estrategia := randomEstrategia()
						juagada := randomJugadaPC()
					fi
				[] ultimaJugada[1] => columnas - 3 ->
					if (tablero[ultimaJugada[0]][ultimaJugada[1] - 1] == 0 /\ tablero[ultimaJugada[0]][ultimaJugada[1] - 2] == 0 /\ tablero[ultimaJugada[0]][ultimaJugada[1] - 3] == 0) == true ->
						jugada := ultimaJugada[1] - 1
					[] (tablero[ultimaJugada[0]][ultimaJugada[1] - 1] == 0 /\ tablero[ultimaJugada[0]][ultimaJugada[1] - 2] == 0 /\ tablero[ultimaJugada[0]][ultimaJugada[1] - 3] == 0) == false ->
						estrategia := randomEstrategia()
						juagada := randomJugadaPC()
					fi
				fi
			fi
		[] estrategia == 2 ->
			if ultimaJugada[0] < filas - 3 /\ ultimaJugada[1] < columnas - 3 -> 
				if (tablero[ultimaJugada[0] + 1][ultimaJugada[1] + 1] == 0 /\ tablero[ultimaJugada[0] + 2][ultimaJugada[1] + 2] == 0 /\ tablero[ultimaJugada[0] + 3][ultimaJugada[1] + 3] == 0) == true ->
					if (tablero[ultimaJugada[0] + 2][ultimaJugada[1] + 1] != 0 /\ tablero[ultimaJugada[0] + 3][ultimaJugada[1] + 2] != 0) == true ->
						if ultimaJugada[0] == filas - 4  ->
							jugada := ultimaJugada[1] + 1
						[] ultimaJugada[0] != filas - 4 ->
							if (tablero[ultimaJugada[0] + 4][ultimaJugada[1] + 3] != 0) == true ->
								jugada := ultimaJugada[1] + 1
							[] (tablero[ultimaJugada[0] + 4][ultimaJugada[1] + 3] != 0) == false ->
								estrategia := randomEstrategia()
								juagada := randomJugadaPC()
							fi
						fi
					[] (tablero[ultimaJugada[0] + 0][ultimaJugada[1] + 1] != 0 /\ tablero[ultimaJugada[0] + 3][ultimaJugada[1] + 2] != 0) == false ->
						estrategia := randomEstrategia()
						juagada := randomJugadaPC()
					fi
				[] (tablero[ultimaJugada[0] + 1][ultimaJugada[1] + 1] == 0 /\ tablero[ultimaJugada[0] + 2][ultimaJugada[1] + 2] == 0 /\ tablero[ultimaJugada[0] + 3][ultimaJugada[1] + 3] == 0) == false ->
					estrategia := randomEstrategia()
					juagada := randomJugadaPC()
				fi
			[] ultimaJugada[0] > 2 /\ ultimaJugada[1] > 2 ->
				if (tablero[ultimaJugada[0] - 1][ultimaJugada[1] - 1] == 0 /\ tablero[ultimaJugada[0] - 2][ultimaJugada[1] - 2] == 0 /\ tablero[ultimaJugada[0] - 3][ultimaJugada[1] - 3] == 0) == true ->
					jugada := ultimaJugada[1] - 1
				[] (tablero[ultimaJugada[0] - 1][ultimaJugada[1] - 1] == 0 /\ tablero[ultimaJugada[0] - 2][ultimaJugada[1] - 2] == 0 /\ tablero[ultimaJugada[0] - 3][ultimaJugada[1] - 3] == 0) == false ->
					estrategia := randomEstrategia()
					juagada := randomJugadaPC()
				fi
			[] (ultimaJugada[0] >= filas - 3 /\ ultimaJugada[1] <= 2) \/ (ultimaJugada[0] <= 2 /\ ultimaJugada[1] >= columnas - 3) ->
				estrategia:= randomEstrategia()
				juagada := randomJugadaPC()
			fi
		[] estrategia == 3 ->
			if ultimaJugada[0] < 3 /\ ultimaJugada[1] > 2 -> 
				if (tablero[ultimaJugada[0] + 1][ultimaJugada[1] - 1] == 0 /\ tablero[ultimaJugada[0] + 2][ultimaJugada[1] - 2] == 0 /\ tablero[ultimaJugada[0] + 3][ultimaJugada[1] - 3] == 0) == true ->
					if (tablero[ultimaJugada[0] + 2][ultimaJugada[1] - 1] != 0 /\ tablero[ultimaJugada[0] + 3][ultimaJugada[1] - 2] != 0) == true ->
						if ultimaJugada[0] == filas - 4 ->
							jugada := ultimaJugada[1] - 1
						[] ultimaJugada[0] != filas - 4 ->
							if (tablero[ultimaJugada[0] + 4][ultimaJugada[1] - 3] != 0) == true ->
								jugada := ultimaJugada[1] - 1
							[] (tablero[ultimaJugada[0] + 4][ultimaJugada[1] - 3] != 0) == false ->
								estrategia := randomEstrategia()
								juagada := randomJugadaPC()
							fi
						fi
					[] (tablero[ultimaJugada[0] + 2][ultimaJugada[1] - 1] != 0 /\ tablero[ultimaJugada[0] + 3][ultimaJugada[1] - 2] != 0) == false ->
						estrategia := randomEstrategia()
						juagada := randomJugadaPC()
					fi
				[] (tablero[ultimaJugada[0] + 1][ultimaJugada[1] - 1] == 0 /\ tablero[ultimaJugada[0] + 2][ultimaJugada[1] - 2] == 0 /\ tablero[ultimaJugada[0] + 3][ultimaJugada[1] - 3] == 0) == false ->
					estrategia := randomEstrategia()
					juagada := randomJugadaPC()
				fi
			[] ultimaJugada[0] >= 3 /\ ultimaJugada[1] < columnas - 3 ->
				if (tablero[ultimaJugada[0] - 1][ultimaJugada[1] + 1] == 0 /\ tablero[ultimaJugada[0] - 2][ultimaJugada[1] + 2] == 0 /\ tablero[ultimaJugada[0] - 3][ultimaJugada[1] + 3] == 0) == true ->
					jugada := ultimaJugada[1] + 1
				[] (tablero[ultimaJugada[0] - 1][ultimaJugada[1] + 1] == 0 /\ tablero[ultimaJugada[0] - 2][ultimaJugada[1] + 2] == 0 /\ tablero[ultimaJugada[0] - 3][ultimaJugada[1] + 3] == 0) == false ->
					estrategia := randomEstrategia()
					juagada := randomJugadaPC()
				fi 
			[] (ultimaJugada[0] <= 2 /\ ultimaJugada[1] <= 2) \/ (ultimaJugada[0] >= filas -3 /\ ultimaJugada[1] >= columnas - 3) ->
				estrategia := randomEstrategia()
				juagada := randomJugadaPC()
			fi
		fi
	fi

]

func randomEstrategia() -> int
[
	if true ->
		estrategia := 0
	[] true ->
		estrategia := 1
	[] true ->
		estrategia := 2
	[] true ->
		estrategia := 3
	fi

	>> estrategia
]

func randomJugadaPC() -> int
[
	if true ->
		jugadaPC := 0
	[] true ->
		jugadaPC := 1
	[] true ->
		jugadaPC := 2
	[] true ->
		jugadaPC := 3
	[] true -> 
		jugadaPC := 4
	[] true ->
		jugadaPC := 5
	[] true ->
		jugadaPC := 6
	fi

	>> jugadaPC
]